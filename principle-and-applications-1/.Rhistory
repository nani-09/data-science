N2 = tapply(data$time, list(data$where_bought, data$who_bought), length, simplify = TRUE)   #total length of data$time
tm1 = tapply(data$time, list(data$where_bought, data$who_bought), mean, simplify = TRUE)   #meand of data$time
tsd = tapply(data$time, list(data$where_bought, data$who_bought), sd, simplify = TRUE)   #standard devisation of data$time
se1 = msd / sqrt(N1)
se2 = tsd / sqrt(N2)                                                                      #standard error of data$time
N1
mm
N1 = tapply(data$money, list(data$where_bought, data$who_bought), length, simplify = TRUE)   #total length of data$money
mm = tapply(data$money, list(data$where_bought, data$who_bought), mean, simplify = TRUE)   #meand of data$money
msd = tapply(data$money, list(data$where_bought, data$who_bought), sd, simplify = TRUE)   #standard devisation of data$money
se1 = msd / sqrt(N1)                                                                      #standard error of data$money
N1
mm
msd
se1
N2 = tapply(data$time, list(data$where_bought, data$who_bought), length, simplify = TRUE)   #total length of data$time
tm = tapply(data$time, list(data$where_bought, data$who_bought), mean, simplify = TRUE)   #meand of data$time
tsd = tapply(data$time, list(data$where_bought, data$who_bought), sd, simplify = TRUE)   #standard devisation of data$time
se2 = tsd / sqrt(N2)                                                                      #standard error of data$time
N2
tm
tsd
se2
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error = TRUE)
```{r total length of data$money}
?tapply
N1 = tapply(data$money, list(data$where_bought, data$who_bought), length, simplify = TRUE)
?tapply
N1 = tapply(data$money, list(data$where_bought, data$who_bought), length, simplify = TRUE)
```{r mean of data$money}
mm = tapply(data$money, list(data$where_bought, data$who_bought), mean, simplify = TRUE)
mm = tapply(data$money, list(data$where_bought, data$who_bought), mean, simplify = TRUE)
```{r standard devisation of data$money}
msd = tapply(data$money, list(data$where_bought, data$who_bought), sd, simplify = TRUE)
msd = tapply(data$money, list(data$where_bought, data$who_bought), sd, simplify = TRUE)
```{r standard error of data$money}
```{r 'total length of data$money'}
```{r total_length_of_data$money'}
?tapply
N1 = tapply(data$money, list(data$where_bought, data$who_bought), length, simplify = TRUE)
?tapply
N1 = tapply(data$money, list(data$where_bought, data$who_bought), length, simplify = TRUE)
```{r 'mean of data$money'}
mm = tapply(data$money, list(data$where_bought, data$who_bought), mean, simplify = TRUE)
mm = tapply(data$money, list(data$where_bought, data$who_bought), mean, simplify = TRUE)
```{r standard devisation of data$money}
msd = tapply(data$money, list(data$where_bought, data$who_bought), sd, simplify = TRUE)
msd = tapply(data$money, list(data$where_bought, data$who_bought), sd, simplify = TRUE)
```{r standard error of data$money}
se1 = msd / sqrt(N1)
se1 = msd / sqrt(N1)
```{r total length of data$time}
N2 = tapply(data$time, list(data$where_bought, data$who_bought), length, simplify = TRUE)
N2 = tapply(data$time, list(data$where_bought, data$who_bought), length, simplify = TRUE)
```{r meand of data$time}
tm = tapply(data$time, list(data$where_bought, data$who_bought), mean, simplify = TRUE)
tm = tapply(data$time, list(data$where_bought, data$who_bought), mean, simplify = TRUE)
```{r standard devisation of data$time}
tsd = tapply(data$time, list(data$where_bought, data$who_bought), sd, simplify = TRUE)
tsd = tapply(data$time, list(data$where_bought, data$who_bought), sd, simplify = TRUE)
```{r standard error of data$time}
se2 = tsd / sqrt(N2)
se2 = tsd / sqrt(N2)
?tapply
N1 = tapply(data$money, list(data$where_bought, data$who_bought), length, simplify = TRUE)
?tapply
N1 = tapply(data$money, list(data$where_bought, data$who_bought), length, simplify = TRUE)
?tapply
N1 = tapply(data$money, list(data$where_bought, data$who_bought), length, simplify = TRUE)
N1 = tapply(data$money, list(data$where_bought, data$who_bought), length, simplify = TRUE)
N1
mm = tapply(data$money, list(data$where_bought, data$who_bought), mean, simplify = TRUE)
mm
msd = tapply(data$money, list(data$where_bought, data$who_bought), sd, simplify = TRUE)
msd
se1 = msd / sqrt(N1)
se1
N2 = tapply(data$time, list(data$where_bought, data$who_bought), length, simplify = TRUE)
N2
tm = tapply(data$time, list(data$where_bought, data$who_bought), mean, simplify = TRUE)
tm
tsd = tapply(data$time, list(data$where_bought, data$who_bought), sd, simplify = TRUE)
tsd
se2 = tsd / sqrt(N2)
se2
#degrees of freedom: total number of observations in the market data to be tested minus the number of observations used by indicators, signals, and rules.
df1 = data.frame(N1, mm, msd, se1, check.names = TRUE, fix.empty.names = TRUE)
df1
#degrees of freedom: total number of observations in the market data to be tested minus the number of observations used by indicators, signals, and rules.
df1 = data.frame(N1, mm, msd, se1, check.names = TRUE, fix.empty.names = TRUE, row.names = TRUE)
df1
#degrees of freedom: total number of observations in the market data to be tested minus the number of observations used by indicators, signals, and rules.
df1 = data.frame(N1, mm, msd, se1, check.names = TRUE, fix.empty.names = TRUE, row.names = TRUE)
#degrees of freedom: total number of observations in the market data to be tested minus the number of observations used by indicators, signals, and rules.
df1 = data.frame(N1, mm, msd, se1, check.names = TRUE, fix.empty.names = TRUE)
dft = data.frame(N2, tm, tsd, se2, check.names = TRUE, fix.empty.names = TRUE)
dft
#degrees of freedom: total number of observations in the market data to be tested minus the number of observations used by indicators, signals, and rules.
dfm = data.frame(N1, mm, msd, se1, check.names = TRUE, fix.empty.names = TRUE)
dfm
mm - 1.96  * se1
d
mm - 1.96  * se1
mm + 1.96  * se1
tm - 1.96  * se1
tm + 1.96  * se1
tm = tapply(data$time, list(data$where_bought, data$who_bought), mean, simplify = TRUE)
tm
tm + 1.96  * se1
install.packages('MOTE')
library('MOTE)
library('MOTE')
library('MOTE')
#degrees of freedom: total number of observations in the market data to be tested minus the number of observations used by indicators, signals, and rules.
dataframem = data.frame(N1, mm, msd, se1, check.names = TRUE, fix.empty.names = TRUE)
dfm = N1 -1 #if df is degrees of freedom
dfm
dataFrameT = data.frame(N2, tm, tsd, se2, check.names = TRUE, fix.empty.names = TRUE)
dft = N2 - 1
dataFrameT = data.frame(N2, tm, tsd, se2, check.names = TRUE, fix.empty.names = TRUE)
dft = N2 - 1
dft
n1 = tapply(data$money, list(data$where_bought, data$who_bought), length, simplify = TRUE)
n1
n2 = tapply(data$time, list(data$where_bought, data$who_bought), length, simplify = TRUE)
n2
se1 = msd / sqrt(n1)
se1
se2 = tsd / sqrt(n2)
se2
#degrees of freedom: total number of observations in the market data to be tested minus the number of observations used by indicators, signals, and rules.
dataFrameM = data.frame(n1, mm, msd, se1, check.names = TRUE, fix.empty.names = TRUE)
dfm = N1 -1 #if df is degrees of freedom
dfm
dataFrameT = data.frame(n2, tm, tsd, se2, check.names = TRUE, fix.empty.names = TRUE)
dft = N2 - 1
dft
m1
mm
mm
sameRetailerEffect = d.ind.t(mm[1,2], mm[2,2], msd[1,2], msd[2,2], n1[1,2], n1[2,2])
sameRetailerEffect
sameRetailerEffect = d.ind.t(mm[2,2], mm[1,2], msd[2,2], msd[1,2], n1[2,2], n1[1,2])
sameRetailerEffect
sameRetailerEffect = d.ind.t(mm[2,2], mm[1,2], msd[2,2], msd[1,2], n1[2,2], n1[1,2], a=0.05)
sameRetailerEffect
differentRetailerEffect = d.ind.t(tm[2,1], tm[1,1], tsd[2,1], tsd[1,1], n1[2,1], n2[1,1], a=0.05)
differentRetailerEffect
mm
tm
differentRetailerEffect
tm
tsd
?t.ind.t
??t.ind.t
??d.ind.t
?d.ind.t
differentRetailerEffect = d.ind.t(tm[1,1], tm[2,1], tsd[1,1], tsd[2,1], n1[1,1], n2[2,1], a=0.05)
differentRetailerEffect
differentRetailerEffect = d.ind.t(tm[2,1], tm[1,1], tsd[2,1], tsd[1,1], n1[2,1], n2[1,1], a=0.05)
differentRetailerEffect
differentRetailerEffect = d.ind.t(tm[2,1], tm[1,1], tsd[2,1], tsd[1,1], n1[2,1], n2[1,1], a = .05)
differentRetailerEffect
sameRetailerEffect = d.ind.t(mm[2,2], mm[1,2], msd[2,2], msd[1,2], n1[2,2], n1[1,2])
sameRetailerEffect
differentRetailerEffect = d.ind.t(tm[2,1], tm[1,1], tsd[2,1], tsd[1,1], n1[2,1], n2[1,1])
differentRetailerEffect
n1 = tapply(data$money, list(data$where_bought, data$who_bought), length)
n1
mm = tapply(data$money, list(data$where_bought, data$who_bought), mean)
mm
mm
sameRetailerEffect = d.ind.t(mm[2,2], mm[1,2], msd[2,2], msd[1,2], n1[2,2], n1[1,2])
sameRetailerEffect
differentRetailerEffect$d
sameRetailerEffect$d
install.packages('pwr')
?pwr
?pwr.t.test
##Store versus online when bought at the same retailer
pwr.t.test(n =NULL, d = sameRetailerEffect$d, sig.level = .05, power = 0.08, type = 'two.sample', alternative = 'two.sided')
library('pwr')
##Store versus online when bought at the same retailer
pwr.t.test(n =NULL, d = sameRetailerEffect$d, sig.level = .05, power = 0.08, type = 'two.sample', alternative = 'two.sided')
##Store versus online when bought at the same retailer
pwr.t.test(n = NULL, d = sameRetailerEffect$d, sig.level = .05, power = 0.80, type = 'two.sample', alternative = 'two.sided')
##Store versus online when bought at the same retailer
pwr.t.test(n = NULL, d = sameRetailerEffect$d, sig.level = .05, power = 0.80)
##Store versus online when bought at a different retailer
pwr.t.test(n = NULL, d = differentRetailerEffect$d, sig.level = .05, power = 0.80)
n2 = tapply(data$time, list(data$where_bought, data$who_bought), length, simplify = TRUE)
n2
tm = tapply(data$time, list(data$where_bought, data$who_bought), mean)
tm
tm = tapply(data$time, list(data$where_bought, data$who_bought), mean, simplify = TRUE)
tm
n2 = tapply(data$time, list(data$where_bought, data$who_bought), length, simplify = TRUE)
n2
tsd = tapply(data$time, list(data$where_bought, data$who_bought), sd, simplify = TRUE)
tsd
se2 = tsd / sqrt(n2)
se2
##Store versus online when bought at a different retailer
pwr.t.test(n = NULL, d = differentRetailerEffect$d, sig.level = .05)
##Store versus online when bought at a different retailer
pwr.t.test(n = NULL, d = differentRetailerEffect$d, sig.level = .05, power = 0.80)
library('MOTE')
differentRetailerEffect = d.ind.t(tm[2,1], tm[1,1], tsd[2,1], tsd[1,1], n1[2,1], n2[1,1])
differentRetailerEffect$d
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error = TRUE)
data = read.csv('04_data.csv')
data
n1 = tapply(data$money, list(data$where_bought, data$who_bought), length)
n1
mm = tapply(data$money, list(data$where_bought, data$who_bought), mean)
mm
msd = tapply(data$money, list(data$where_bought, data$who_bought), sd, simplify = TRUE)
msd
se1 = msd / sqrt(n1)
se1
n2 = tapply(data$time, list(data$where_bought, data$who_bought), length, simplify = TRUE)
n2
tm = tapply(data$time, list(data$where_bought, data$who_bought), mean, simplify = TRUE)
tm
tsd = tapply(data$time, list(data$where_bought, data$who_bought), sd, simplify = TRUE)
tsd
se2 = tsd / sqrt(n2)
se2
#degrees of freedom: total number of observations in the market data to be tested minus the number of observations used by indicators, signals, and rules.
dataFrameM = data.frame(n1, mm, msd, se1, check.names = TRUE, fix.empty.names = TRUE)
dfm = N1 -1 #if df is degrees of freedom for money
dfm
dataFrameT = data.frame(n2, tm, tsd, se2, check.names = TRUE, fix.empty.names = TRUE)
dft = N2 - 1 #if df is degrees of freedom for time
dft
#Resourse: http://onlinestatbook.com/2/estimation/mean.html
mm - 1.96  * se1
mm + 1.96  * se1
tm - 1.96  * se1
tm + 1.96  * se1
#Resourse: https://www.rdocumentation.org/packages/MOTE/versions/1.0.2/topics/d.ind.t.t
library('MOTE')
sameRetailerEffect = d.ind.t(mm[2,2], mm[1,2], msd[2,2], msd[1,2], n1[2,2], n1[1,2])
sameRetailerEffect$d
library('MOTE')
differentRetailerEffect = d.ind.t(tm[2,1], tm[1,1], tsd[2,1], tsd[1,1], n1[2,1], n2[1,1])
differentRetailerEffect$d
library('pwr')
##Store versus online when bought at the same retailer
pwr.t.test(n = NULL, d = sameRetailerEffect$d, sig.level = .05, power = 0.80)
##Store versus online when bought at a different retailer
pwr.t.test(n = NULL, d = differentRetailerEffect$d, sig.level = .05, power = 0.80)
differentRetailerEffect = d.ind.t(tm[2,1], tm[1,1], tsd[2,1], tsd[1,1], n1[2,1], n2[1,1])
differentRetailerEffect$d
library('MOTE')
differentRetailerEffect = d.ind.t(34.7028, 25.3808, 3.0516, 2.8054, 50, 50)
differentRetailerEffect$d
mm = tapply(data$money, list(data$where_bought, data$who_bought), mean)
mm
differentRetailerEffect = d.ind.t(tm[2, 1], tm[1, 1], tsd[2, 1], tsd[1, 1], n1[2, 1], n2[1, 1], a = .05)
differentRetailerEffect$d
differentRetailerEffect = d.ind.t(mm[2, 1], mm[1, 1], msd[2, 1], msd[1, 1], n1[2, 1], n2[1, 1])
differentRetailerEffect$d
##Store versus online when bought at a different retailer
pwr.t.test(n = NULL, d = differentRetailerEffect$d, sig.level = .05, power = 0.80)
##Store versus online when bought at the same retailer
# As we have take n = NUll, as we got find that value.
pwr.t.test(n = NULL, d = sameRetailerEffect$d, a = .05, power = 0.80)
##Store versus online when bought at the same retailer
# As we have take n = NUll, as we got find that value.
pwr.t.test(n = NULL, d = sameRetailerEffect$d, sig.level = .05, power = 0.80)
load("kobe.RData")  # Kobe's shooting stats in few games
head(kobe)
tail(kobe)
dim(kobe)
pnorm(1.82)-pnorm(-1.82)
98.2 - 0.03(0.73)
98.2 - 0.03 * 0.73
qnorm(0.03)
?pnor,
?pnorm
?qnorm
kobe$basket[1:9] ## what is another way to get the same data???
kobe[1:9,6]
kobe_streak <- calc_streak(kobe$basket)
##  Lets see how this looks...
kobe_streak
barplot(table(kobe_streak))
table(kobe$basket)/133
#define the outcomes
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
calc_streak(sim_basket)
sim_fair_coin <- sample(outcomes, size = 1000, replace = TRUE)
##   To view the results of this simulation, type the name of the object and then use  table  to
##   count up the number of heads and tails.
sim_fair_coin
table(sim_fair_coin)
table(sim_fair_coin)/1000
sim_unfair_coin <- sample(outcomes, size = 10000, replace = TRUE, prob = c(0.2, 0.8))
table(sim_unfair_coin)/1000
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 1, replace = TRUE, prob = c(.5, 0.5))
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob = c(.436, 0.564))
kobe$basket
sim_basket
calc_streak(sim_basket)
barplot(table(calc_streak(sim_basket)))
##.Describe the distribution of streak lengths. What is the typical streak length for this
##.Describe the distribution of streak lengths. What is the typical streak length for this
## simulated independent shooter with a 45% shooting percentage? How long is the player's longest streak
#       .If you were to run the simulation of the independent shooter a second time,
#       .If you were to run the simulation of the independent shooter a second time,
#       how would you expect its streak distribution to compare to the distribution from the question
#       .If you were to run the simulation of the independent shooter a second time,
#       how would you expect its streak distribution to compare to the distribution from the question
#       above? Exactly the same? Somewhat similar? ?Totally different Explain your reasoning.
#       .How does Kobe Bryant's distribution of streak lengths compare to the distribution of streak
#       .How does Kobe Bryant's distribution of streak lengths compare to the distribution of streak
#       lengths for the simulated shooter? Using this comparison,
#       .How does Kobe Bryant's distribution of streak lengths compare to the distribution of streak
#       lengths for the simulated shooter? Using this comparison,
#       do you have evidence that the hot hand model fits Kobe's shooting patterns? Explain
#       .How does Kobe Bryant's distribution of streak lengths compare to the distribution of streak
#       lengths for the simulated shooter? Using this comparison,
#       do you have evidence that the hot hand model fits Kobe's shooting patterns? Explain
#       .How does Kobe Bryant's distribution of streak lengths compare to the distribution of streak
#       lengths for the simulated shooter? Using this comparison,
#       do you have evidence that the hot hand model fits Kobe's shooting patterns? Explain
#       .How does Kobe Bryant's distribution of streak lengths compare to the distribution of streak
#       lengths for the simulated shooter? Using this comparison,
#       do you have evidence that the hot hand model fits Kobe's shooting patterns? Explain
#       .How does Kobe Bryant's distribution of streak lengths compare to the distribution of streak
#       lengths for the simulated shooter? Using this comparison,
#       do you have evidence that the hot hand model fits Kobe's shooting patterns? Explain
#       .How does Kobe Bryant's distribution of streak lengths compare to the distribution of streak
#       lengths for the simulated shooter? Using this comparison,
#       do you have evidence that the hot hand model fits Kobe's shooting patterns? Explain
View(calc_streak)
View(linegraph)
View(linegraph)
View(linegraph)
View(simfun)
View(standarddeviation)
?dim
View(calc_streak)
View(calc_streak)
load("kobe.RData")  # Kobe's shooting stats in few games
head(kobe)
tail(kobe)
dim(kobe)
kobe$basket[1:9] ## what is another way to get the same data???
kobe[1:9,6]
barplot(table(kobe_streak))
knitr::opts_chunk$set(echo = TRUE)
download.file("http://www.openintro.org/stat/data/kobe.RData", destfile = "kobe.RData")
load("kobe.RData")  # Kobe's shooting stats in few games
head(kobe)
tail(kobe)
dim(kobe)
kobe$basket[1:9] ## what is another way to get the same data???
kobe[1:9,6]
kobe_streak <- calc_streak(kobe$basket)
kobe_streak
barplot(table(kobe_streak))
table(kobe$basket)/133
barplot(table(kobe_streak))
barplot(table(kobe_streak))
dnorm(table(kobe_streak), col = 'red', lwd = 2, add = TRUE)
table(kobe$basket)/133
barplot(table(kobe_streak))
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 1000, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
table(sim_fair_coin)/1000
sim_unfair_coin <- sample(outcomes, size = 10000, replace = TRUE, prob = c(0.2, 0.8))
table(sim_unfair_coin)/1000
table(sim_fair_coin)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
?sample
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
table(sim_fair_coin)
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sample(outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
table(sim_fair_coin)
sim_unfair_coin <- sample(outcomes, size = 10000, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
table(sim_unfair_coin)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
table(sim_unfair_coin)
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
table(sim_fair_coin)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
table(sim_unfair_coin)
outcomes <- c("heads", "tails")
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
outcomes <- c("heads", "tails")
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
outcomes <- c("heads", "tails")
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
outcomes <- c("heads", "tails")
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
outcomes <- c("heads", "tails")
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
outcomes <- c("heads", "tails")
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
outcomes <- c("heads", "tails")
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
outcomes <- c("heads", "tails")
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
outcomes <- c("heads", "tails")
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
outcomes <- c("heads", "tails")
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
outcomes <- c("heads", "tails")
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
outcomes <- c("heads", "tails")
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
outcomes <- c("heads", "tails")
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
outcomes <- c("heads", "tails")
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob = c(.45, 0.55))
sim_basket
table(sim_basket)
calc_streak(sim_basket)
barplot(table(calc_streak(sim_basket)))
calc_streak(sim_basket)
barplot(table(calc_streak(sim_basket)))
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob = c(.45, 0.55))
sim_basket
table(sim_basket)
calc_streak(sim_basket)
barplot(table(calc_streak(sim_basket)))
set.seed(3)
set.seed(3)
seed <- set.seed(3)
seed
barplot(table(kobe$basket))
barplot(table(calc_streak(sim_basket)))
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob = c(.45, 0.55))
sim_basket
table(sim_basket)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob = c(.45, 0.55))
sim_basket
table(sim_basket)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob = c(.45, 0.55))
sim_basket
table(sim_basket)
calc_streak(sim_basket)
barplot(table(calc_streak(sim_basket)))
barplot(table(kobe$basket))
barplot(table(kobe$basket))
barplot(table(calc_streak(kobe$basket)))
barplot(table(kobe_streak))
